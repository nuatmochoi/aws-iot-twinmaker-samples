# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
AWSTemplateFormatVersion: "2010-09-09"
Description: AWS template for IoT SiteWise export to S3.

Conditions:
  #SiteWise (and our lambda bucket) only exists in these regions
  ValidRegion:
    Fn::Or:
     - Fn::Or:
        - Fn::Equals:
            - Ref: AWS::Region
            - us-east-1
        - Fn::Equals:
            - Ref: AWS::Region
            - us-west-2
        - Fn::Equals:
            - Ref: AWS::Region
            - eu-west-1
        - Fn::Equals:
            - Ref: AWS::Region
            - eu-central-1
        - Fn::Equals:
            - Ref: AWS::Region
            - ap-southeast-1
        - Fn::Equals:
            - Ref: AWS::Region
            - ap-southeast-2
        - Fn::Equals:
            - Ref: AWS::Region
            - cn-north-1
        - Fn::Equals:
            - Ref: AWS::Region
            - ap-south-1
        - Fn::Equals:
            - Ref: AWS::Region
            - ap-northeast-1
        - Fn::Equals:
            - Ref: AWS::Region
            - ap-northeast-2
     - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1

Parameters:
  BucketName:
    Description: "The name of an Amazon S3 bucket that this stack creates for your asset data. This name must be unique across all existing bucket names in S3."
    Type: "String"
    AllowedPattern: '[a-z0-9\\-]+'
    ConstraintDescription: "The bucket name can have between 3 and 63 characters. Valid characters: a-z, 0-9, and - (hyphen)"
    MinLength: 3
    MaxLength: 63
  GlobalResourcePrefix:
    Description: "This prefix appears in the name of global resources that this stack creates (for example, Amazon S3 buckets and AWS IAM roles)."
    Type: "String"
    Default: "sitewise-export-to-s3"
    AllowedPattern: '[a-z0-9\\-]+'
    ConstraintDescription: "The global resource prefix can have between 3 and 23 characters. Valid characters: a-z, 0-9, and - (hyphen)"
    MinLength: 3
    MaxLength: 23
  LocalResourcePrefix:
    Description: "This prefix appears in the name of resources that this stack creates in this Region (for example, AWS Glue resources, an AWS IoT rule, and AWS Lambda functions)."
    Type: "String"
    Default: "sitewise_export_to_s3"
    AllowedPattern: '[a-z0-9\\_]+'
    ConstraintDescription: "The local resource prefix can have between 3 and 23 characters. Valid characters: a-z, 0-9, and _ (underscore)"
    MinLength: 3
    MaxLength: 23

Resources:
  IoTSitewiseExportToS3DestinationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${BucketName}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  IoTSitewiseExportToS3GlueDatabase:
    Type: AWS::Glue::Database
    Condition: ValidRegion
    Properties:
      CatalogId: !Sub ${AWS::AccountId}
      DatabaseInput:
        Description: Name of the Glue database
        Name: !Sub ${LocalResourcePrefix}_firehose_glue_database

  IotTSitewiseExportToS3GlueTable:
    DependsOn: IoTSitewiseExportToS3GlueDatabase
    Type: AWS::Glue::Table
    Condition: ValidRegion
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref IoTSitewiseExportToS3GlueDatabase
      TableInput:
        Name: !Sub ${LocalResourcePrefix}_firehose_glue_table
        TableType: EXTERNAL_TABLE
        Parameters: { "classification": "parquet" }
        StorageDescriptor:
          Columns:
            - Name: type
              Type: string
            - Name: asset_id
              Type: string
            - Name: asset_property_id
              Type: string
            - Name: time_in_seconds
              Type: int
            - Name: offset_in_nanos
              Type: int
            - Name: asset_property_quality
              Type: string
            - Name: asset_property_value
              Type: string
            - Name: asset_property_data_type
              Type: string
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Location: !Sub
            - "s3://${BucketName}/asset-property-updates/"
            - { BucketName: !Ref IoTSitewiseExportToS3DestinationBucket }
          SerdeInfo:
            Parameters: { "serialization.format": "1" }
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe

  IoTSiteWiseExportToS3TransformFunction:
    Type: AWS::Lambda::Function
    Condition: ValidRegion
    Properties:
      FunctionName: !Sub ${LocalResourcePrefix}_lambda_transform_function
      Code:
        S3Bucket: !Sub aws-iot-sitewise-${AWS::Region}
        S3Key: exportToS3/transform_json_data.zip
      Handler: transform_lambda.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseExportToS3TransformFunctionRole, Arn]
      Runtime: python3.10
      Timeout: 900

  IoTSiteWiseExportToS3TransformFunctionRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      RoleName: !Sub ${GlobalResourcePrefix}-lambda-transform-role
      Description: Role for IoT SiteWise export to S3 transform Lambda function.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: "2012-10-17"
      Policies:
        - PolicyName: !Sub ${GlobalResourcePrefix}-lambda-transform-policy
          PolicyDocument:
            Statement:
              - Action:
                  [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                  ]
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
            Version: "2012-10-17"

  IoTSiteWiseExportToS3TransformFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: IoTSiteWiseExportToS3TransformFunction
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IoTSiteWiseExportToS3TransformFunction}"

  IoTSiteWiseExportToS3KinesisFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: ValidRegion
    Properties:
      DeliveryStreamName: !Sub ${LocalResourcePrefix}_firehose_delivery_stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt IoTSiteWiseKinesisDeliveryRole.Arn
        BucketARN: !GetAtt IoTSitewiseExportToS3DestinationBucket.Arn
        BufferingHints:
          SizeInMBs: "64"
          IntervalInSeconds: "60"
        CompressionFormat: UNCOMPRESSED
        Prefix: asset-property-updates/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        ErrorOutputPrefix: !Sub ${LocalResourcePrefix}_data_processing_error/
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref IoTSiteWiseExportToS3FirehoseLogGroup
          LogStreamName: S3Delivery
        S3BackupMode: Disabled
        ProcessingConfiguration:
          Enabled: "true"
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt IoTSiteWiseExportToS3TransformFunction.Arn
                - ParameterName: BufferSizeInMBs
                  ParameterValue: 3
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: 60
              Type: Lambda
        DataFormatConversionConfiguration:
          Enabled: true
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer:
              ParquetSerDe: {}
          SchemaConfiguration:
            CatalogId: !Ref AWS::AccountId
            RoleARN: !GetAtt IoTSiteWiseKinesisDeliveryRole.Arn
            DatabaseName: !Ref IoTSitewiseExportToS3GlueDatabase
            Region: !Ref AWS::Region
            TableName: !Ref IotTSitewiseExportToS3GlueTable
            VersionId: LATEST
  
  IoTSiteWiseExportToS3FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/kinesisfirehose/${LocalResourcePrefix}_firehose_delivery_stream"

  IoTSiteWiseExportToS3FirehoseLogStream:
    Type: AWS::Logs::LogStream
    Condition: ValidRegion
    Properties:
      LogGroupName: !Ref IoTSiteWiseExportToS3FirehoseLogGroup
      LogStreamName: S3Delivery

  IoTSiteWiseKinesisDeliveryRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      RoleName: !Sub ${GlobalResourcePrefix}-firehose-delivery-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Path: "/"
      Policies:
        - PolicyName: !Sub ${GlobalResourcePrefix}_firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub
                    - "${BucketArn}/*"
                    - BucketArn: !GetAtt IoTSitewiseExportToS3DestinationBucket.Arn
                  - !Sub
                    - "${BucketArn}"
                    - BucketArn: !GetAtt IoTSitewiseExportToS3DestinationBucket.Arn
              - Effect: Allow
                Action:
                  - "glue:GetTableVersions"
                  - "glue:GetTables"
                  - "glue:GetTable"
                Resource:
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub
                    - "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}"
                    - { DatabaseName: !Ref IoTSitewiseExportToS3GlueDatabase }
                  - !Sub
                    - "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/${DatabaseTableName}"
                    - DatabaseName: !Ref IoTSitewiseExportToS3GlueDatabase
                      DatabaseTableName: !Ref IotTSitewiseExportToS3GlueTable
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource: !GetAtt IoTSiteWiseExportToS3TransformFunction.Arn
              - Effect: Allow
                Action: "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  IoTSiteWiseExportToS3MetadataFunction:
    Type: AWS::Lambda::Function
    Condition: ValidRegion
    Properties:
      FunctionName: !Sub ${LocalResourcePrefix}_lambda_metadata_function
      Code:
        S3Bucket: !Sub aws-iot-sitewise-${AWS::Region}
        S3Key: exportToS3/asset-metadata-script.zip
      Handler: asset_metadata_lambda.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseExportToS3MetadataFunctionRole, Arn]
      Runtime: python3.10
      Timeout: 900

  IoTSiteWiseExportToS3MetadataFunctionRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      RoleName: !Sub ${GlobalResourcePrefix}-lambda-metadata-role
      Description: Role for IoT SiteWise export to S3 metadata Lambda function.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: "2012-10-17"
      Policies:
        - PolicyName: !Sub ${GlobalResourcePrefix}-lambda-metadata-policy
          PolicyDocument:
            Statement:
              - Action:
                  [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                  ]
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action:
                  - "iotsitewise:Describe*"
                  - "iotsitewise:List*"
                  - "iotsitewise:Get*"
                Effect: Allow
                Resource: "*"
              - Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Effect: Allow
                Resource:
                  - !Sub
                    - "${BucketArn}/*"
                    - BucketArn: !GetAtt IoTSitewiseExportToS3DestinationBucket.Arn
                  - !Sub
                    - "${BucketArn}"
                    - BucketArn: !GetAtt IoTSitewiseExportToS3DestinationBucket.Arn
            Version: "2012-10-17"

  IoTSiteWiseExportToS3MetadataScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: IoTSiteWiseExportToS3MetadataFunctionRole
    Condition: ValidRegion
    Properties:
      Description: "Scheduled rule for metadata Lambda function"
      Name: !Sub ${LocalResourcePrefix}_metadata_event
      ScheduleExpression: "rate(6 hours)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt: [IoTSiteWiseExportToS3MetadataFunction, Arn]
          Id: IoTSiteWiseExportToS3MetadataFunction
          Input:
            Fn::Sub:
              ' { "bucket_name" : "${IoTSitewiseExportToS3DestinationBucket}",
                  "key_name_prefix" : "asset-metadata"
              }'

  IoTSiteWiseExportToS3MetadataEventPermission:
    Type: AWS::Lambda::Permission
    DependsOn: IoTSiteWiseExportToS3MetadataFunctionRole
    Condition: ValidRegion
    Properties:
      FunctionName:
        Ref: "IoTSiteWiseExportToS3MetadataFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt: [IoTSiteWiseExportToS3MetadataScheduledRule, Arn]

  IoTSiteWiseExportToS3CoreRule:
    Type: AWS::IoT::TopicRule
    Condition: ValidRegion
    Properties:
      RuleName: !Sub ${LocalResourcePrefix}_iot_topic_rule
      TopicRulePayload:
        Actions:
          - Firehose:
              DeliveryStreamName: !Ref IoTSiteWiseExportToS3KinesisFirehoseDeliveryStream
              RoleArn: !GetAtt IoTSiteWiseExportToS3CoreAccessToFirehoseRole.Arn
              Separator: "\n"
        AwsIotSqlVersion: 2016-03-23
        RuleDisabled: "false"
        Sql: >-
          SELECT * FROM '$aws/sitewise/asset-models/+/assets/+/properties/+' WHERE type = 'PropertyValueUpdate'

  IoTSiteWiseExportToS3CoreAccessToFirehoseRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      RoleName: !Sub ${GlobalResourcePrefix}-core-firehose-role
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${GlobalResourcePrefix}-core-firehose-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub
                  - "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${DeliveryStreamName}"
                  - DeliveryStreamName: !Ref IoTSiteWiseExportToS3KinesisFirehoseDeliveryStream
                Effect: Allow
                Action:
                  - firehose:PutRecord

